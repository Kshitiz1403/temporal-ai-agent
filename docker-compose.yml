version: '3.8'

services:
  temporal:
    image: temporalio/server:1.25.2.0
    container_name: temporal-server
    restart: unless-stopped
    user: "0:0" # running as root to avoid permission issues with writing to /tmp/sqlite/db
    entrypoint:
      - temporal
      - server
      - start-dev
      - --namespace=default
      - --db-filename=/tmp/sqlite/db
      - --ip=0.0.0.0
    volumes:
      - temporal-data:/tmp/sqlite
    ports:
      - "3012:8233"  # Direct access to Temporal Web UI
    networks:
      - temporal-agent-network


  # API Server
  api-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: temporal-agent-api-server
    depends_on:
      - temporal
    environment:
      - NODE_ENV=production
      - PORT=3000
      - CORS_ORIGINS=http://localhost
      - HOST=0.0.0.0
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASK_QUEUE=ai-agent-queue
      - LOG_LEVEL=info
      # LLM Configuration (add your API keys here or use .env file)
      - LLM_DEFAULT_PROVIDER=anthropic
      - LLM_DEFAULT_MODEL=claude-3-5-sonnet-20241022
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY:-}
    networks:
      - temporal-agent-network
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    command: npm run start

  # Temporal Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: temporal-agent-worker
    depends_on:
      - temporal
    environment:
      - NODE_ENV=production
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASK_QUEUE=ai-agent-queue
      - LOG_LEVEL=info
      # LLM Configuration (add your API keys here or use .env file)
      - LLM_DEFAULT_PROVIDER=anthropic
      - LLM_DEFAULT_MODEL=claude-3-5-sonnet-20241022
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY:-}
    networks:
      - temporal-agent-network
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    command: npm run worker

  # Frontend with nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_BASE_URL=/api/agent
        - VITE_APP_NAME=Temporal AI Agent ðŸ¤–
        - VITE_APP_ENV=production
        - VITE_POLL_INTERVAL=2000
        - VITE_MAX_RETRIES=5
    container_name: temporal-agent-frontend
    networks:
      - temporal-agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/frontend-health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  reverse-proxy:
    image: nginx:alpine
    container_name: temporal-agent-reverse-proxy
    depends_on:
      - api-server
      - frontend
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - temporal-agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/proxy-health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  temporal-agent-network:
    driver: bridge

volumes:
  temporal-data: